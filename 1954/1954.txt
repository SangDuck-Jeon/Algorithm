#include<iostream>
 
using namespace std;
#define Right   1
#define Down  2
#define Left     3
#define Up      4
int step, N, count, once;
 
int check_step(void)
{   
    if(once == 0)   
    {
        step = N;
        once = 1;   
    }
    else
    {
        count++;
        if(count == 1)  step -= 1; 
        else if(count == 2) count = 0;
    }
    return step;
}
int main(int argc, char** argv)
{
    int test_case;
    int T, final_value, step_count[100]={0}, direction, i, j = 0, sum = 0, k, col_start, row, col, step_put=0, finish = 0,b=0;
    int Table[10][10] = {0,};
    cin>>T;
    for(test_case = 1; test_case <= T; ++test_case)
    {
        int put_value = 1;
         
        cin>>N;
        final_value = N*2-1;
        direction = Right;
        row = N-1;
        col = 0;
        for(k=0; k<final_value; k++) 
        {
            int a = 0;
            a = check_step(); 
            sum += a; 
            step_count[k] += sum;          
            //printf("(%d|%d|%d)", step_count[k],sum,k );
        }
 
        for(i=0; i<sum; i++)
        {
            switch(direction){
                case Right:
                    //printf("(R %d,%d)", row, col);
                    Table[row][col] = put_value;
                    put_value++;
                                         
                    if(i == step_count[b]-1) row--;
                    else col++;
                    break;
                case Down:
                    //printf("(D %d,%d)", row, col);
                    Table[row][col] = put_value;
                    put_value++;
  
                    if(i == step_count[b]-1) col--;
                    else row--;
                    break;
 
                case Left:
                   //printf("(L %d,%d)", row, col);
                    Table[row][col] = put_value;
                    put_value++;
 
                    if(i == step_count[b]-1) row++;
                    else col--;
                    break;
                case Up:
                    //printf("(U %d,%d)", row, col);
                    Table[row][col] = put_value;
                    put_value++;
 
                    if(i == step_count[b]-1) col++;
                    else row++;
                    break;
            } // switch end
            if(i == step_count[b]-1)    
            {
                direction++;
                b++;
            }
            if(direction==5) direction=1;
        }
        b=0;
 
        once = 0;
        count = 0;
        sum = 0;
        for(k=0; k<final_value; k++) step_count[k] = 0; 
         
        printf("#%d", test_case);
        for(i=N-1; i>=0; i--)
        {printf("\n");
            for(k=0; k<N; k++)  printf("%d ", Table[i][k]);
             
        }
        printf("\n");
    }
     
    return 0;//정상종료시 반드시 0을 리턴해야합니다.
}